import java_cup.runtime.*;
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

parser code {:
  private Scanner sc = new Scanner(System.in);
  private int contador = 0;
  private double somatorio = 0.0;
  Map<String,Object> table = new HashMap<>();
  public double getDouble(){
    return this.sc.nextDouble();
  }
  public boolean inDesig = false; 
  public void update(Object value){
    if (value == null){ 
      return;
    }
    this.contador++;
    this.somatorio += Double.parseDouble(value.toString());
  }
  public void imprimeRelatorio(){
    System.out.println(this.table.toString());

    System.out.println("Foram reconhecidas e computadas:");
    System.out.println(this.contador + " expressões");
    System.out.println("Cujo somatório foi: " + this.somatorio);
  }
:}

/* TERMINAIS */
terminal PTVIRG, MAIS, MENOS, DIV, MULT, MOD, PTO, IDENT,EQUAL;
terminal ABRE_PARENT, FECHA_PARENT, ABRE_COLCH, FECHA_COLCH, KW_IF;
terminal Double NUMBER;

/* NÃO TERMINAIS */
non terminal expr_list, expr_ptv;
non terminal Object expr, term, factor,designator;

expr_list ::= expr_list expr_ptv:e {:
    parser.update(e);
  :} | expr_ptv:e {:
    parser.update(e);
  :};

expr_ptv ::= expr:e {: 
  System.out.println("= " + e); 
  RESULT = e; 
  :} PTVIRG;

expr ::= expr:e MAIS term:t {:
System.out.println("e: " + e);
    RESULT = (double)e + (double)t; 
  :} | expr:e MENOS term:t {:
    System.out.println("e: " + e);
    System.out.println("t: " + t);
    RESULT = (double)e - (double)t;
  :} | MENOS term:t {:
    RESULT = -1 * (double)t;
  :}
  | designator:key EQUAL term:value {:
    parser.table.put(key.toString(),value);
  :}
   | term:t {:
    RESULT = t;
  :};

term ::= factor:f MULT term:t {: 
    RESULT = (double)f * (double)t;  
  :} | factor:f DIV term:t {:
    Object denominador = t;
    if(parser.inDesig){
      while((double)denominador == 0.0){
        System.out.println("O denominador não pode ser zero");
        System.out.println("Informe o denominador:");
        denominador = parser.getDouble();
      }
    }
    parser.inDesig = false;
    RESULT = (double)f / (double)denominador;  
  :}| factor:f MOD term:t {:
    Integer denominador = Integer.parseInt(t.toString().split("\\.")[0]);
    
    if(denominador.getClass()==Integer.class){
      RESULT = (double)f / (int)denominador;
    }
  :} | factor:f {:
    RESULT = f;
  :};

factor ::= NUMBER:n {: 
  System.out.println("NUMBER: " + n);
    RESULT = n;
  :} | ABRE_PARENT expr:e FECHA_PARENT {:
    RESULT = e;
  :} | designator:d {:
    parser.inDesig = true;
    RESULT = parser.table.get(d);
  :};

designator ::= designator ABRE_COLCH expr:e FECHA_COLCH {:
    if((double)e < 0){
      System.out.println("O índice do vetor não negativo");
      double indice = -1;
      
      do{
        System.out.print("Digite um índice válido: ");
        indice = parser.getDouble();
        System.out.println();
      }while(indice < 0);
      RESULT = indice;
    }else{
      RESULT = e;
    }
  :} | designator:e PTO IDENT:id {:

    String key = e.toString() + "." + id.toString();
    System.out.println("key: " + key);
    Object s = key;
    RESULT =s;
  :} | IDENT:id {:
      RESULT = id;
  :};